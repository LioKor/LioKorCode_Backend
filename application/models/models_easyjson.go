// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	sql "database/sql"
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeLiokoreduApplicationModels(in *jlexer.Lexer, out *TaskSQL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = uint64(in.Uint64())
		case "Title":
			out.Title = string(in.String())
		case "Description":
			out.Description = string(in.String())
		case "Hints":
			easyjsonD2b7633eDecodeDatabaseSql(in, &out.Hints)
		case "Input":
			out.Input = string(in.String())
		case "Output":
			out.Output = string(in.String())
		case "TestAmount":
			out.TestAmount = int(in.Int())
		case "Tests":
			out.Tests = string(in.String())
		case "Creator":
			out.Creator = uint64(in.Uint64())
		case "IsPrivate":
			out.IsPrivate = bool(in.Bool())
		case "Code":
			easyjsonD2b7633eDecodeDatabaseSql(in, &out.Code)
		case "Date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeLiokoreduApplicationModels(out *jwriter.Writer, in TaskSQL) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Id))
	}
	{
		const prefix string = ",\"Title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"Description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"Hints\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeDatabaseSql(out, in.Hints)
	}
	{
		const prefix string = ",\"Input\":"
		out.RawString(prefix)
		out.String(string(in.Input))
	}
	{
		const prefix string = ",\"Output\":"
		out.RawString(prefix)
		out.String(string(in.Output))
	}
	{
		const prefix string = ",\"TestAmount\":"
		out.RawString(prefix)
		out.Int(int(in.TestAmount))
	}
	{
		const prefix string = ",\"Tests\":"
		out.RawString(prefix)
		out.String(string(in.Tests))
	}
	{
		const prefix string = ",\"Creator\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Creator))
	}
	{
		const prefix string = ",\"IsPrivate\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPrivate))
	}
	{
		const prefix string = ",\"Code\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeDatabaseSql(out, in.Code)
	}
	{
		const prefix string = ",\"Date\":"
		out.RawString(prefix)
		out.Raw((in.Date).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TaskSQL) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeLiokoreduApplicationModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TaskSQL) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeLiokoreduApplicationModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TaskSQL) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeLiokoreduApplicationModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TaskSQL) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeLiokoreduApplicationModels(l, v)
}
func easyjsonD2b7633eDecodeDatabaseSql(in *jlexer.Lexer, out *sql.NullString) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "String":
			out.String = string(in.String())
		case "Valid":
			out.Valid = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeDatabaseSql(out *jwriter.Writer, in sql.NullString) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"String\":"
		out.RawString(prefix[1:])
		out.String(string(in.String))
	}
	{
		const prefix string = ",\"Valid\":"
		out.RawString(prefix)
		out.Bool(bool(in.Valid))
	}
	out.RawByte('}')
}
func easyjsonD2b7633eDecodeLiokoreduApplicationModels1(in *jlexer.Lexer, out *Task) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint64(in.Uint64())
		case "name":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "stdinDescription":
			out.Input = string(in.String())
		case "stdoutDescription":
			out.Output = string(in.String())
		case "hints":
			out.Hints = string(in.String())
		case "testsAmount":
			out.TestsAmount = int(in.Int())
		case "tests":
			(out.Tests).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeLiokoreduApplicationModels1(out *jwriter.Writer, in Task) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"stdinDescription\":"
		out.RawString(prefix)
		out.String(string(in.Input))
	}
	{
		const prefix string = ",\"stdoutDescription\":"
		out.RawString(prefix)
		out.String(string(in.Output))
	}
	{
		const prefix string = ",\"hints\":"
		out.RawString(prefix)
		out.String(string(in.Hints))
	}
	{
		const prefix string = ",\"testsAmount\":"
		out.RawString(prefix)
		out.Int(int(in.TestsAmount))
	}
	{
		const prefix string = ",\"tests\":"
		out.RawString(prefix)
		(in.Tests).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Task) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeLiokoreduApplicationModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Task) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeLiokoreduApplicationModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Task) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeLiokoreduApplicationModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Task) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeLiokoreduApplicationModels1(l, v)
}
func easyjsonD2b7633eDecodeLiokoreduApplicationModels2(in *jlexer.Lexer, out *SolutionsSQL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(SolutionsSQL, 0, 0)
			} else {
				*out = SolutionsSQL{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 SolutionSQL
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeLiokoreduApplicationModels2(out *jwriter.Writer, in SolutionsSQL) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v SolutionsSQL) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeLiokoreduApplicationModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SolutionsSQL) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeLiokoreduApplicationModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SolutionsSQL) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeLiokoreduApplicationModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SolutionsSQL) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeLiokoreduApplicationModels2(l, v)
}
func easyjsonD2b7633eDecodeLiokoreduApplicationModels3(in *jlexer.Lexer, out *Solutions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Solutions, 0, 0)
			} else {
				*out = Solutions{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 SolutionOne
			(v4).UnmarshalEasyJSON(in)
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeLiokoreduApplicationModels3(out *jwriter.Writer, in Solutions) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			(v6).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Solutions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeLiokoreduApplicationModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Solutions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeLiokoreduApplicationModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Solutions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeLiokoreduApplicationModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Solutions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeLiokoreduApplicationModels3(l, v)
}
func easyjsonD2b7633eDecodeLiokoreduApplicationModels4(in *jlexer.Lexer, out *SolutionUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "checkResult":
			out.Code = int(in.Int())
		case "checkMessage":
			out.CheckMessage = string(in.String())
		case "testsPassed":
			out.Passed = int(in.Int())
		case "testsTotal":
			out.TestsTotal = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeLiokoreduApplicationModels4(out *jwriter.Writer, in SolutionUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"checkResult\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"checkMessage\":"
		out.RawString(prefix)
		out.String(string(in.CheckMessage))
	}
	{
		const prefix string = ",\"testsPassed\":"
		out.RawString(prefix)
		out.Int(int(in.Passed))
	}
	{
		const prefix string = ",\"testsTotal\":"
		out.RawString(prefix)
		out.Int(int(in.TestsTotal))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SolutionUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeLiokoreduApplicationModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SolutionUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeLiokoreduApplicationModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SolutionUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeLiokoreduApplicationModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SolutionUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeLiokoreduApplicationModels4(l, v)
}
func easyjsonD2b7633eDecodeLiokoreduApplicationModels5(in *jlexer.Lexer, out *SolutionSend) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint64(in.Uint64())
		case "sourceCode":
			out.SourceCode = string(in.String())
		case "tests":
			(out.Tests).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeLiokoreduApplicationModels5(out *jwriter.Writer, in SolutionSend) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Id))
	}
	{
		const prefix string = ",\"sourceCode\":"
		out.RawString(prefix)
		out.String(string(in.SourceCode))
	}
	{
		const prefix string = ",\"tests\":"
		out.RawString(prefix)
		(in.Tests).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SolutionSend) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeLiokoreduApplicationModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SolutionSend) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeLiokoreduApplicationModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SolutionSend) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeLiokoreduApplicationModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SolutionSend) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeLiokoreduApplicationModels5(l, v)
}
func easyjsonD2b7633eDecodeLiokoreduApplicationModels6(in *jlexer.Lexer, out *SolutionSQL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = uint64(in.Uint64())
		case "ReceivedDateTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ReceivedDateTime).UnmarshalJSON(data))
			}
		case "SourceCode":
			out.SourceCode = string(in.String())
		case "TaskId":
			out.TaskId = uint64(in.Uint64())
		case "CheckResult":
			out.CheckResult = int(in.Int())
		case "TestsPassed":
			out.TestsPassed = int(in.Int())
		case "TestsTotal":
			out.TestsTotal = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeLiokoreduApplicationModels6(out *jwriter.Writer, in SolutionSQL) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Id))
	}
	{
		const prefix string = ",\"ReceivedDateTime\":"
		out.RawString(prefix)
		out.Raw((in.ReceivedDateTime).MarshalJSON())
	}
	{
		const prefix string = ",\"SourceCode\":"
		out.RawString(prefix)
		out.String(string(in.SourceCode))
	}
	{
		const prefix string = ",\"TaskId\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.TaskId))
	}
	{
		const prefix string = ",\"CheckResult\":"
		out.RawString(prefix)
		out.Int(int(in.CheckResult))
	}
	{
		const prefix string = ",\"TestsPassed\":"
		out.RawString(prefix)
		out.Int(int(in.TestsPassed))
	}
	{
		const prefix string = ",\"TestsTotal\":"
		out.RawString(prefix)
		out.Int(int(in.TestsTotal))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SolutionSQL) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeLiokoreduApplicationModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SolutionSQL) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeLiokoreduApplicationModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SolutionSQL) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeLiokoreduApplicationModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SolutionSQL) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeLiokoreduApplicationModels6(l, v)
}
func easyjsonD2b7633eDecodeLiokoreduApplicationModels7(in *jlexer.Lexer, out *SolutionOne) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint64(in.Uint64())
		case "sourceCode":
			out.SourceCode = string(in.String())
		case "receivedDatetime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ReceivedDateTime).UnmarshalJSON(data))
			}
		case "checkResult":
			out.CheckResult = int(in.Int())
		case "testsPassed":
			out.TestsPassed = int(in.Int())
		case "testsTotal":
			out.TestsTotal = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeLiokoreduApplicationModels7(out *jwriter.Writer, in SolutionOne) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Id))
	}
	{
		const prefix string = ",\"sourceCode\":"
		out.RawString(prefix)
		out.String(string(in.SourceCode))
	}
	{
		const prefix string = ",\"receivedDatetime\":"
		out.RawString(prefix)
		out.Raw((in.ReceivedDateTime).MarshalJSON())
	}
	{
		const prefix string = ",\"checkResult\":"
		out.RawString(prefix)
		out.Int(int(in.CheckResult))
	}
	{
		const prefix string = ",\"testsPassed\":"
		out.RawString(prefix)
		out.Int(int(in.TestsPassed))
	}
	{
		const prefix string = ",\"testsTotal\":"
		out.RawString(prefix)
		out.Int(int(in.TestsTotal))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SolutionOne) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeLiokoreduApplicationModels7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SolutionOne) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeLiokoreduApplicationModels7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SolutionOne) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeLiokoreduApplicationModels7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SolutionOne) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeLiokoreduApplicationModels7(l, v)
}
func easyjsonD2b7633eDecodeLiokoreduApplicationModels8(in *jlexer.Lexer, out *SolutionId) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeLiokoreduApplicationModels8(out *jwriter.Writer, in SolutionId) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SolutionId) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeLiokoreduApplicationModels8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SolutionId) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeLiokoreduApplicationModels8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SolutionId) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeLiokoreduApplicationModels8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SolutionId) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeLiokoreduApplicationModels8(l, v)
}
func easyjsonD2b7633eDecodeLiokoreduApplicationModels9(in *jlexer.Lexer, out *Solution) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sourceCode":
			out.SourceCode = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeLiokoreduApplicationModels9(out *jwriter.Writer, in Solution) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sourceCode\":"
		out.RawString(prefix[1:])
		out.String(string(in.SourceCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Solution) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeLiokoreduApplicationModels9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Solution) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeLiokoreduApplicationModels9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Solution) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeLiokoreduApplicationModels9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Solution) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeLiokoreduApplicationModels9(l, v)
}
func easyjsonD2b7633eDecodeLiokoreduApplicationModels10(in *jlexer.Lexer, out *InputTests) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(InputTests, 0, 2)
			} else {
				*out = InputTests{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v7 []string
			if in.IsNull() {
				in.Skip()
				v7 = nil
			} else {
				in.Delim('[')
				if v7 == nil {
					if !in.IsDelim(']') {
						v7 = make([]string, 0, 4)
					} else {
						v7 = []string{}
					}
				} else {
					v7 = (v7)[:0]
				}
				for !in.IsDelim(']') {
					var v8 string
					v8 = string(in.String())
					v7 = append(v7, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
			*out = append(*out, v7)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeLiokoreduApplicationModels10(out *jwriter.Writer, in InputTests) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v9, v10 := range in {
			if v9 > 0 {
				out.RawByte(',')
			}
			if v10 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
				out.RawString("null")
			} else {
				out.RawByte('[')
				for v11, v12 := range v10 {
					if v11 > 0 {
						out.RawByte(',')
					}
					out.String(string(v12))
				}
				out.RawByte(']')
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v InputTests) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeLiokoreduApplicationModels10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InputTests) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeLiokoreduApplicationModels10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InputTests) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeLiokoreduApplicationModels10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InputTests) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeLiokoreduApplicationModels10(l, v)
}
