// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	sql "database/sql"
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeLiokoreduApplicationModels(in *jlexer.Lexer, out *TestsJson) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(TestsJson, 0, 2)
			} else {
				*out = TestsJson{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 []string
			if in.IsNull() {
				in.Skip()
				v1 = nil
			} else {
				in.Delim('[')
				if v1 == nil {
					if !in.IsDelim(']') {
						v1 = make([]string, 0, 4)
					} else {
						v1 = []string{}
					}
				} else {
					v1 = (v1)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					v1 = append(v1, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeLiokoreduApplicationModels(out *jwriter.Writer, in TestsJson) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v3, v4 := range in {
			if v3 > 0 {
				out.RawByte(',')
			}
			if v4 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
				out.RawString("null")
			} else {
				out.RawByte('[')
				for v5, v6 := range v4 {
					if v5 > 0 {
						out.RawByte(',')
					}
					out.String(string(v6))
				}
				out.RawByte(']')
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v TestsJson) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeLiokoreduApplicationModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TestsJson) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeLiokoreduApplicationModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TestsJson) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeLiokoreduApplicationModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TestsJson) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeLiokoreduApplicationModels(l, v)
}
func easyjsonD2b7633eDecodeLiokoreduApplicationModels1(in *jlexer.Lexer, out *TaskSQL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = uint64(in.Uint64())
		case "Title":
			out.Title = string(in.String())
		case "Description":
			out.Description = string(in.String())
		case "Hints":
			easyjsonD2b7633eDecodeDatabaseSql(in, &out.Hints)
		case "Input":
			out.Input = string(in.String())
		case "Output":
			out.Output = string(in.String())
		case "TestAmount":
			out.TestAmount = int(in.Int())
		case "Tests":
			out.Tests = string(in.String())
		case "Creator":
			out.Creator = uint64(in.Uint64())
		case "IsPrivate":
			out.IsPrivate = bool(in.Bool())
		case "Code":
			easyjsonD2b7633eDecodeDatabaseSql(in, &out.Code)
		case "Date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeLiokoreduApplicationModels1(out *jwriter.Writer, in TaskSQL) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Id))
	}
	{
		const prefix string = ",\"Title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"Description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"Hints\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeDatabaseSql(out, in.Hints)
	}
	{
		const prefix string = ",\"Input\":"
		out.RawString(prefix)
		out.String(string(in.Input))
	}
	{
		const prefix string = ",\"Output\":"
		out.RawString(prefix)
		out.String(string(in.Output))
	}
	{
		const prefix string = ",\"TestAmount\":"
		out.RawString(prefix)
		out.Int(int(in.TestAmount))
	}
	{
		const prefix string = ",\"Tests\":"
		out.RawString(prefix)
		out.String(string(in.Tests))
	}
	{
		const prefix string = ",\"Creator\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Creator))
	}
	{
		const prefix string = ",\"IsPrivate\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPrivate))
	}
	{
		const prefix string = ",\"Code\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeDatabaseSql(out, in.Code)
	}
	{
		const prefix string = ",\"Date\":"
		out.RawString(prefix)
		out.Raw((in.Date).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TaskSQL) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeLiokoreduApplicationModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TaskSQL) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeLiokoreduApplicationModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TaskSQL) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeLiokoreduApplicationModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TaskSQL) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeLiokoreduApplicationModels1(l, v)
}
func easyjsonD2b7633eDecodeDatabaseSql(in *jlexer.Lexer, out *sql.NullString) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "String":
			out.String = string(in.String())
		case "Valid":
			out.Valid = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeDatabaseSql(out *jwriter.Writer, in sql.NullString) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"String\":"
		out.RawString(prefix[1:])
		out.String(string(in.String))
	}
	{
		const prefix string = ",\"Valid\":"
		out.RawString(prefix)
		out.Bool(bool(in.Valid))
	}
	out.RawByte('}')
}
func easyjsonD2b7633eDecodeLiokoreduApplicationModels2(in *jlexer.Lexer, out *Task) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint64(in.Uint64())
		case "name":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "stdinDescription":
			out.Input = string(in.String())
		case "stdoutDescription":
			out.Output = string(in.String())
		case "hints":
			out.Hints = string(in.String())
		case "testsAmount":
			out.TestsAmount = int(in.Int())
		case "tests":
			out.Tests = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeLiokoreduApplicationModels2(out *jwriter.Writer, in Task) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"stdinDescription\":"
		out.RawString(prefix)
		out.String(string(in.Input))
	}
	{
		const prefix string = ",\"stdoutDescription\":"
		out.RawString(prefix)
		out.String(string(in.Output))
	}
	{
		const prefix string = ",\"hints\":"
		out.RawString(prefix)
		out.String(string(in.Hints))
	}
	{
		const prefix string = ",\"testsAmount\":"
		out.RawString(prefix)
		out.Int(int(in.TestsAmount))
	}
	{
		const prefix string = ",\"tests\":"
		out.RawString(prefix)
		out.String(string(in.Tests))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Task) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeLiokoreduApplicationModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Task) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeLiokoreduApplicationModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Task) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeLiokoreduApplicationModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Task) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeLiokoreduApplicationModels2(l, v)
}
