// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: redactor.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RedactorClient is the client API for Redactor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RedactorClient interface {
	CreateConnection(ctx context.Context, in *IdValue, opts ...grpc.CallOption) (*CreateAnswer, error)
	Connect(ctx context.Context, in *IdValue, opts ...grpc.CallOption) (*ConnectAnswer, error)
}

type redactorClient struct {
	cc grpc.ClientConnInterface
}

func NewRedactorClient(cc grpc.ClientConnInterface) RedactorClient {
	return &redactorClient{cc}
}

func (c *redactorClient) CreateConnection(ctx context.Context, in *IdValue, opts ...grpc.CallOption) (*CreateAnswer, error) {
	out := new(CreateAnswer)
	err := c.cc.Invoke(ctx, "/Redactor/CreateConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redactorClient) Connect(ctx context.Context, in *IdValue, opts ...grpc.CallOption) (*ConnectAnswer, error) {
	out := new(ConnectAnswer)
	err := c.cc.Invoke(ctx, "/Redactor/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RedactorServer is the server API for Redactor service.
// All implementations should embed UnimplementedRedactorServer
// for forward compatibility
type RedactorServer interface {
	CreateConnection(context.Context, *IdValue) (*CreateAnswer, error)
	Connect(context.Context, *IdValue) (*ConnectAnswer, error)
}

// UnimplementedRedactorServer should be embedded to have forward compatible implementations.
type UnimplementedRedactorServer struct {
}

func (UnimplementedRedactorServer) CreateConnection(context.Context, *IdValue) (*CreateAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnection not implemented")
}
func (UnimplementedRedactorServer) Connect(context.Context, *IdValue) (*ConnectAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}

// UnsafeRedactorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RedactorServer will
// result in compilation errors.
type UnsafeRedactorServer interface {
	mustEmbedUnimplementedRedactorServer()
}

func RegisterRedactorServer(s grpc.ServiceRegistrar, srv RedactorServer) {
	s.RegisterService(&Redactor_ServiceDesc, srv)
}

func _Redactor_CreateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedactorServer).CreateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Redactor/CreateConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedactorServer).CreateConnection(ctx, req.(*IdValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Redactor_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedactorServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Redactor/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedactorServer).Connect(ctx, req.(*IdValue))
	}
	return interceptor(ctx, in, info, handler)
}

// Redactor_ServiceDesc is the grpc.ServiceDesc for Redactor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Redactor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Redactor",
	HandlerType: (*RedactorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateConnection",
			Handler:    _Redactor_CreateConnection_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _Redactor_Connect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "redactor.proto",
}
